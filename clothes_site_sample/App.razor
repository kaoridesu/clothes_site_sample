@using clothes_site_sample.Scripts.Tables
@using System.Text.Json

@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

@inject MasterClothRepository masterClothRepository
@inject MasterClothColorRepository masterClothColorRepository
@inject MasterClothImageRepository masterClothImageRepository
@inject MasterClothRelationRepository masterClothRelationRepository
@inject MasterProductRepository masterProductRepository

@inherits clothes_site_sample.scripts.Bases.AppComponentBase<App>

@if (isLoading)
{
    <p>
        <em>スプレッドシートからデータ取得中...</em>
    </p>
}
else
{
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}

@code
{
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
    // string json1 = await HttpClient.GetStringAsync(requestUri: "database/master_cloth.json");
    // string json2 = await HttpClient.GetStringAsync(requestUri: "database/master_cloth_color.json");
    // string json3 = await HttpClient.GetStringAsync(requestUri: "database/master_cloth_image.json");
    // string json4 = await HttpClient.GetStringAsync(requestUri: "database/master_cloth_relation.json");
    // string json5 = await HttpClient.GetStringAsync(requestUri: "database/master_product.json");

    // マスターデータをスプレッドシートから取る場合はこちら
        string json = await HttpClient.GetStringAsync(requestUri: "https://script.google.com/macros/s/AKfycbw_oM7K0sMnA2fYfkq98TsQt1IOsz3TfibyapxefcvLlPEfP5-pszy6G13bdl3XDjAkCw/exec");

    // マスターデータをプロジェクトから取る場合はこちら
    // string json = await HttpClient.GetStringAsync("database/master_1.json");

        JsonElement jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
        masterClothRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothEntity>>(jsonElement.GetProperty("[D]master_clothes").ToString()!));
        masterClothColorRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothColorEntity>>(jsonElement.GetProperty("[D]master_clothes_color").ToString()!));
        masterClothImageRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothImageEntity>>(jsonElement.GetProperty("[D]master_clothes_image").ToString()!));
        masterClothRelationRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothRelationEntity>>(jsonElement.GetProperty("[D]master_clothes_relation").ToString()!));
        masterProductRepository.FromJson(JsonSerializer.Deserialize<List<MasterProductEntity>>(jsonElement.GetProperty("[D]master_product").ToString()!));
        masterPickupRepository.FromJson(JsonSerializer.Deserialize<List<MasterPickupEntity>>(jsonElement.GetProperty("[D]master_pickup").ToString()!));
    // masterClothRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothEntity>>(json1));
    // masterClothColorRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothColorEntity>>(json2));
    // masterClothImageRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothImageEntity>>(json3));
    // masterClothRelationRepository.FromJson(JsonSerializer.Deserialize<List<MasterClothRelationEntity>>(json4));
    // masterProductRepository.FromJson(JsonSerializer.Deserialize<List<MasterProductEntity>>(json5));

    // localStorage.SetItem("testMaster", JsonSerializer.Serialize(masterClothRepository.FindAll(), serializerOptions));
    // foreach (var entity in masterClothRepository.FindAll())
    // {
    //     Console.WriteLine(entity.Id.ToString());
    //     Console.WriteLine(entity.ProductName.ToString());
    // }

        isLoading = false;
    }
}